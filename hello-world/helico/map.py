from utils import randbool 
from utils import randcell
from utils import randcell2

# 0 - –ø–æ–ª–µ
# 1 - –¥–µ—Ä–µ–≤–æ
# 2 - —Ä–µ–∫–∞
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 - –∞–ø–≥—Ä–µ–π–¥-—à–æ–ø
# 5 - –æ–≥–æ–Ω—å

CELL_TYPES = "üü©üå≤üåäüè•üè¨üî•"
TREE_BONUS = 100
UPGRADE_COST = 5000
LIFE_COST = 10000

class Map:
    
    def __init__(self, w, h): # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)] # —Å–∞–º–∏ –∫–ª–µ—Ç–æ—á–∫–∏, h - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤, –∏ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥–µ –±—É–¥–µ—Ç w –∫–ª–µ—Ç–æ—á–µ–∫
        self.generate_forest(5, 10)
        self.generate_river(10)
        self.generate_river(10)
        self.generate_upgrade_shop()
        self.generate_hospital()

    def check_bounds (self, x, y): # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–µ—Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º–∏ —Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞—à–µ–º—É –ø–æ–ª—é
        if (x < 0 or y < 0 or x >= self.h or y >= self.w):
            return False
        return True

    def print_map(self, helico, clouds): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞—à—É –∫–∞—Ä—Ç—É
        print("‚¨õ" * (self.w + 2))
        for ri in range(self.h): # row –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ cells, —Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—è–¥–∞
            print("‚¨õ", end='')
            for ci in range(self.w): # —ç—Ç–∏–º —Ü–∏–∫–ª–æ–º –º—ã –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–æ—á–∫—É –∏ –±—É–¥–µ–º –µ—ë –≤—ã–≤–æ–¥–∏—Ç—å
                cells = self.cells[ri][ci]
                if (helico.x == ri and helico.y == ci):
                    print("üöÅ", end='')
                elif (cells >= 0 and cells < len(CELL_TYPES)):
                    print(CELL_TYPES[cells], end='')
                if (clouds.cells[ri][ci] == 1):
                    print("X", end='')
                elif (clouds.cells[ri][ci] == 2):
                    print("X", end='')
            print("‚¨õ")
        print("‚¨õ" * (self.w + 2))

    def generate_river(self, l):# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∫
        rc = randcell(self.w, self.h)
        rx, ry = rc[0], rc[1]
        self.cells[rx][ry] = 2
        while l > 0:
            rc2 = randcell2(rx, ry)
            rx2, ry2 = rc2[0], rc2[1]
            if (self.check_bounds(rx2, ry2)):
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l -= 1
    def generate_forest(self, r, mxr):# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ—Å  
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1
    def generate_tree(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 0:
            self.cells[cx][cy] = 1
    
    def generate_upgrade_shop(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4

    def generate_hospital(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] != 4:
            self.cells[cx][cy] = 3
        else:
            self.generate_hospital()

    def add_fire(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 1:
            self.cells[cx][cy] = 5
    def update_fires(self): #–±—É–¥–µ—Ç —É–±–∏—Ä–∞—Ç—å —Ç–µ –æ–≥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–æ—Ä–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ
        for ri in range(self.h):
            for ci in range(self.w):
                cells = self.cells[ri][ci]
                if cells == 5:
                    self.cells[ri][ci] = 0
        for i in range(10): #–º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –¥–æ 5—Ç–∏ –æ–≥–Ω–µ–π –∏ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö –∫–ª–µ—Ç–æ—á–∫–∞—Ö, –≥–¥–µ –µ—Å—Ç—å –¥–µ—Ä–µ–≤–æ
            self.add_fire()

    def process_helicopter(self, helico, clouds):
        c = self.cells[helico.x][helico.y]
        d = clouds.cells[helico.x][helico.y]
        if (c == 2):
            helico.tank = helico.mxtank
        if (c == 5 and helico.tank > 0):
            helico.tank -= 1
            helico.score += TREE_BONUS
            self.cells[helico.x][helico.y] = 1
        if (c == 4 and helico.score >= UPGRADE_COST):
            helico.mxtank += 1
            helico.score -= UPGRADE_COST
        if (c == 4 and helico.score >= LIFE_COST):
            helico.lives += 1000
            helico.score -= LIFE_COST
        if (d == 2):
            helico.lives -= 1
            if (helico.lives == 0):
                helico.game_over()
    

